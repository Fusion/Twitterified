<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * The MIT License
 *
 * Copyright (c) 2008
 * United Nations Office at Geneva
 * Center for Advanced Visual Analytics
 * http://cava.unog.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	>
	
	<mx:Label
		id="lllabel"
		toolTip="Use this control to length of links. Used when AutoFit is disabled."
		text="Link Length"
		fontSize="9" 
		textAlign="center"
		/>
		
	<mx:HBox width="95%">
		<mx:Button
			id="minusLinkLength"
			icon="{EmbeddedIcons.zoomoutIcon}"
			cornerRadius="5"
			width="25"
			height="25"
			click="lslider.value=lslider.value-25;updateLinkLength();"
			/>		
		<mx:HSlider
			tickInterval="25"
			width="95%"
			id="lslider"
			value="100"
			minimum="0"
			maximum="600"
			liveDragging="true"
			change="updateLinkLength()"
			/>
		<mx:Button
			id="plusLinkLength"
			icon="{EmbeddedIcons.zoominIcon}"
			cornerRadius="5"
			width="25"
			height="25"
			click="lslider.value=lslider.value+25;updateLinkLength();"
			/>	
	</mx:HBox>
	
	
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import org.un.cava.birdeye.ravis.graphLayout.visual.VisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.visual.IVisualGraph;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ILayoutAlgorithm;
			import org.un.cava.birdeye.ravis.assets.icons.EmbeddedIcons;
			import org.un.cava.birdeye.ravis.utils.events.VGraphEvent;
			
			/* critical */
			private var _vgraph:VisualGraph;

			/**
			 * Provides access to the registered vgraph object.
			 * */
			[Bindable]
			public function set vgraph(v:VisualGraph):void {
				_vgraph = v;
				registerListeners();
			}

			/**
			 * @private
			 * */
			public function get vgraph():VisualGraph {
				return _vgraph;
			}
			
			/**
			 * When enabling or disabling this component, we also
			 * perform some specific tasks.
			 * Attention do completely disable interaction
			 * there is also the mouseEnabled property.
			 * 
			 * @inheritDoc
			 * */
			override public function set enabled(e:Boolean):void {
				if(lllabel != null && lslider != null) {
					if(e == true) {
						lllabel.setStyle("color",0x000000);
						lslider.alpha=1;
					} else {
						lllabel.setStyle("color",0xCCCCCC);
						lslider.alpha=0.3;
					}
				}
				/* call superclass (VBox) */
				super.enabled = e;
			}
			
			/**
			 * Event handler to be triggered in case the
			 * layouter in VGraph has changed.
			 * Only used to apply the current value to the new layouter.
			 * */
			public function layouterChanged(e:VGraphEvent = null):void {
				
				/* check if we have a layouter at all */
				if(_vgraph == null || _vgraph.layouter == null) {
					trace("Cannot apply LinkLength to missing vgraph or null layouter");
					return;
				}
				
				/* this is a default control component, and valid
				 * for all layouters, thus we only need to apply
				 * the value to the new layouter. 
				 * We don't call updateLinkLength(), since this 
				 * triggers a draw(), which we do not want here
				 */ 
				_vgraph.layouter.linkLength = lslider.value;
				_vgraph.layouter.layoutChanged = true;
			}
				
			
			/** 
			 * Update the linklength, this indicator always
 			 * goes from 0 to 100, depending on the layouter
 			 * this is translated to something meaningful.
 			 * */		
			public function updateLinkLength():void {
				
				/* check if we have a layouter at all */
				if(_vgraph == null || _vgraph.layouter == null) {
					trace("Cannot update LinkLength on missing vgraph or null layouter");
					return;
				}
				
				/* update the value */
				_vgraph.layouter.linkLength = lslider.value;
				_vgraph.layouter.layoutChanged = true;
				
				/* trigger redraw */
				_vgraph.draw();
			}
			
			/**
			 * This refreshes the current slider setting to
			 * the value from the current layouter.
			 * */
			public function refreshSlider(e:VGraphEvent = null):void {
				
				/* check if we have a layouter at all */
				if(_vgraph == null || _vgraph.layouter == null) {
					trace("Cannot refresh LinkLength from missing vgraph or null layouter");
					return;
				}
				
				/* refresh the value */
				lslider.value = _vgraph.layouter.linkLength;
			}
			
			/**
			 * Adds the listeners to update on changes in the VGraph
			 * */
			private function registerListeners():void {
				_vgraph.addEventListener(VGraphEvent.VGRAPH_CHANGED,refreshSlider);
				_vgraph.addEventListener(VGraphEvent.LAYOUTER_CHANGED,layouterChanged);
			}
		]]>
	</mx:Script>
</mx:VBox>